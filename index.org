#+OPTIONS: title:t date:t author:t email:t
#+OPTIONS: toc:t h:6 num:nil |:t todo:nil
#+OPTIONS: *:t -:t ::t <:t \n:t e:t creator:nil
#+OPTIONS: f:t inline:t tasks:t tex:t timestamp:t
#+OPTIONS: html-preamble:t html-postamble:nil

#+PROPERTY: header-args:R :session R:purrr :eval no :exports code :tangle yes :comments link

#+TITLE:   @@html:<span style="font-size: 85%;">@@R workshop for the@@html:</span>@@@@html:<br>@@International Ornithological Congress@@html:<br>@@@@html:<span style="font-size: 85%;">@@Vancouver, 2018@@html:</span>@@
#+DATE:	   {{{time(%B %d\, %Y)}}}
#+AUTHOR:  Marie-Hélène Burle
#+EMAIL:   msb2@sfu.ca

Most of us biologists, do not learn R properly: we do not have a computing science background, we do not necessarily have access to R courses, and when we do, these seldom make use of modern R tools. So, for the most part, we learn R as we go, on our own. And we become good at problem solving. But do we ever become good at solving R problems /well/?

Having code that works is great of course. But having code that is more efficient, easier to read, less prone to errors, shorter, clearer, cleaner, and which makes a better use of R's characteristics as a coding language, is certainly a whole lot better.

This tutorial follows the recommendations and "views" of the src_R[:eval no]{tidyverse}, a set of modern R packages. It will start with a very short introduction to best practices in R for reproducibility and readability, then dive into the subject of functional programming using the src_R[:eval no]{tidyverse} package src_R[:eval no]{purrr}.

* Topics covered

** Part 1 (very briefly): best practices in R

- Self-contained projects for portability (as described by [[https://github.com/jennybc][Jenny Bryan]]),
- Clean sessions for reproducibility
- Formatting for better readability (as suggested by [[http://hadley.nz/][Hadley Wickham]]).

The workshop material can be found [[https://prosoitos.github.io/International-Ornithological-Congress_r-workshops/r_best-practices.html][here]].

** Part 2: Functional programming in R using purrr

- Introduction to functional programming,
- How to apply functions to many elements with src_R[:eval no]{purrr} (alternative to loops),
- Nested data frames,
- A little detour to some less used pipes of the src_R[:eval no]{magrittr} package.

The workshop material can be found [[https://prosoitos.github.io/International-Ornithological-Congress_r-workshops/r_functional-programming_no-answer.html][here]].

* Audience for the workshop

- Intermediate R users comfortable with basic data manipulation, simple functions, and loops,
- Advanced users familiar with functional programming using the src_R[:eval no]{apply} functions family and interested in discovering the "purrring" way.

#+HTML: <br>

#+BEGIN_VERSE
About myself:
I am a PhD candidate in the [[https://www.sfu.ca/biology/wildberg/NewCWEPage/CWEnewTestHome.htm][Centre for Wildlife Ecology]] at [[https://www.sfu.ca/][Simon Fraser University]], 
an R Peer at the [[https://www.sfu.ca/dean-gradstudies/new_graduate_students/campus_services/research-commons.html][Research Commons]], 
a [[https://www.lib.sfu.ca/about/branches-depts/slc/slc-who/grad-facilitators/undergraduate-writing][Graduate Writing Facilitator]] at the [[https://www.lib.sfu.ca/about/branches-depts/slc][Student Learning Commons]], 
and a certified [[https://software-carpentry.org/][Software Carpentry]] and [[http://www.datacarpentry.org/][Data Carpentry]] instructor.
#+END_VERSE
